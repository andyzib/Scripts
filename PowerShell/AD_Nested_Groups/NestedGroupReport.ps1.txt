#requires -version 3
<#
.SYNOPSIS
Get report of group members, including nested groups. 

.DESCRIPTION
Get report of group members, including nested groups. 

.PARAMETER CSV
List of groups to report on. CSV or Group paramater is required. 

.PARAMETER Group
Active Directory group group to report on. CSV or Group parameter is required. 

.PARAMETER Credential
OPTIONAL: Credential to use for connecting to domain. If not provided, current user will be used. 

.PARAMETER Domain
OPTIONAL: Active directory domain to report on. If not provided, current domain will be used. 

.PARAMETER outdir
OPTIONAL: Output directory for the reports. Defaults to the Documents folder. 

.OUTPUTS
Reports will be saved in your Documents folder or the folder specified by the -outdir parameter. 

.NOTES
Created By: Andrew Zbikowski <andyzib@gmail.com>

2016-05-23: Initial version. 
2016-05-24: Inproved paramaters. 
  
.EXAMPLE
Single Group Mode: 
GroupReport.ps1 -Group "Domain Admins"

List of Groups in CSV:
GroupReport.ps1 -CSV MyGroups.csv

#>

#-------------[Parameters]-----------------------------------------------------
# Enable -Debug, -Verbose Parameters. Write-Debug and Write-Verbose! 
[CmdletBinding()]

Param (
    [Parameter()][string]$CSV = $false,
    [Parameter()][string]$Group = $false,
    [Parameter()][string]$Credential = $false,
    [Parameter()][string]$Domain = $false,
    [Parameter()][string]$Header = "Group",
    [Parameter()][string]$outdir = "$($env:USERPROFILE)\Documents"
)

#-------------[Parameter Validation]-------------------------------------------
# Sanitize User Input

if ( ($CSV -eq $false) -And ($Group -eq $false) ) {
    Throw "CSV file or AD Group Name must be specified."
}

if ($CSV -ne $false) {

    # Check that the CSV file exists. 
    $CSV = $CSV.Trim()
    if (-Not (Test-Path -PathType Leaf -Path $CSV)) {
        Throw "CSV not found: $CSV"
    }

    # Check that the CSV contains the expected headers. 
    $arrHeaders = (Get-Content $csv | Select-Object -First 1).Split(",")
    if ( $arrHeaders -notcontains $Header ) { Throw "$csv does not have a column named $Header"}

    # Try reading CSV.
    Try { $csvdata = Import-Csv -Path $csv }
    Catch { Throw "Unable to read CSV file $csv." }

    $Mode = "CSV"
} else {
    $Mode = "Group"
    # Any checks to perform on the Group parameter? 
}

if ($Domain -eq $false) { 
    $Domain = $env:USERDNSDOMAIN
}
else {
    if ($Credential -eq $false) {
        $Credential = Get-Credential -Message "Enter credential for Active Directory domain $Domain."
    }
}

# Strip trailing \ from $outdir
$outdir = $outdir.Trim()
$outdir = $outdir.TrimEnd("\")
# Check that outdir exists. 
if (-Not (Test-Path -PathType Container -Path $outdir)) {
    Throw "Output directory note found: $outdir"
}

#-------------[Initialisations]------------------------------------------------

#Set Error Action to Silently Continue
#$ErrorActionPreference = "SilentlyContinue"

Import-Module activedirectory -ErrorAction Stop

#-------------[Declarations]---------------------------------------------------

# ISO 8601 Date Format. Accept no substuties!  
$iso8601 = Get-Date -Format s
# Colon (:) isn't a valid character in file names. 
$iso8601 = $iso8601.Replace(":","_")
# Just YYYY-MM-DD
#$datestamp = $iso8601.Substring(0,10)

#-------------[Functions]------------------------------------------------------

# If a group name is passed in DOMAIN\Group format, get rid of DOMAIN\
Function Trim-GroupName {
    Param(
        [Parameter(ValuefromPipeline=$true,mandatory=$true)][String] $GroupName
    )

    if ( ($Group.IndexOf("\") -lt 0 ) ) {
        New-Object –TypeName PSObject | 
        Add-Member –MemberType NoteProperty –Name Domain –Value "" –PassThru |
        Add-Member –MemberType NoteProperty –Name Group –Value $Group –PassThru
        Return
    }
    else {
        $leftPart = $Group.Substring(0, $($Group.IndexOf("\")))
        $rightPart = $Group.Substring($($Group.IndexOf("\"))+1)
     
        New-Object –TypeName PSObject | 
        Add-Member –MemberType NoteProperty –Name Domain –Value $leftPart –PassThru |
        Add-Member –MemberType NoteProperty –Name Group –Value $rightPart –PassThru
        Return
    }
}

Function Get-ADNestedGroupMembers { 
<#  
.SYNOPSIS
Author: Piotr Lewandowski
Version: 1.01 (04.08.2015) - added displayname to the output, changed name to samaccountname in case of user objects.

.DESCRIPTION
Get nested group membership from a given group or a number of groups.

Function enumerates members of a given AD group recursively along with nesting level and parent group information. 
It also displays if each user account is enabled. 
When used with an -indent switch, it will display only names, but in a more user-friendly way (sort of a tree view) 
   
.EXAMPLE   
Get-ADNestedGroupMembers "MyGroup" | Export-CSV .\NedstedMembers.csv -NoTypeInformation

.EXAMPLE  
Get-ADGroup "MyGroup" | Get-ADNestedGroupMembers | ft -autosize
            
.EXAMPLE             
Get-ADNestedGroupMembers "MyGroup" -indent
 
#>

    param ( 
    [Parameter(ValuefromPipeline=$true,mandatory=$true)][String] $GroupName, 
    [int] $nesting = -1, 
    [int]$circular = $null, 
    [switch]$indent 
    ) 
    function indent  
    { 
    Param($list) 
        foreach($line in $list) 
        { 
        $space = $null 
         
            for ($i=0;$i -lt $line.nesting;$i++) 
            { 
            $space += "    " 
            } 
            $line.name = "$space" + "$($line.name)"
        } 
      return $List 
    } 
     
$modules = get-module | select -expand name
    if ($modules -contains "ActiveDirectory") 
    { 
        $table = $null 
        $nestedmembers = $null 
        $adgroupname = $null     
        $nesting++   

        if ($Credential -eq $false) { $ADGroupname = Get-ADGroup $groupname -properties memberof,members }
        else { $ADGroupname = Get-ADGroup -Identity $groupname -Credential $Credential -Server $Domain }

        $memberof = $adgroupname | select -expand memberof 
        write-verbose "Checking group: $($adgroupname.name)" 
        if ($adgroupname) 
        {  
            if ($circular) 
            { 
                if ($Credential -eq $false) { $nestedMembers = Get-ADGroupMember -Identity $GroupName -recursive }
                else { $nestedMembers = Get-ADGroupMember -Identity $GroupName -Recursive -Credential $Credential -Server $Domain }
                $circular = $null 
            } 
            else 
            { 
                if ($Credential -eq $false) { $nestedMembers = Get-ADGroupMember -Identity $GroupName | sort objectclass -Descending }
                else { $nestedMembers = Get-ADGroupMember -Identity $GroupName -Credential $Credential -Server $Domain | sort objectclass -Descending }
                if (!($nestedmembers))
                {
                    $unknown = $ADGroupname | select -expand members
                    if ($unknown)
                    {
                        $nestedmembers=@()
                        foreach ($member in $unknown)
                        {
                        $nestedmembers += get-adobject $member
                        }
                    }

                }
            } 
 
            foreach ($nestedmember in $nestedmembers) 
            { 
                $Props = @{Type=$nestedmember.objectclass;Name=$nestedmember.name;DisplayName="";ParentGroup=$ADgroupname.name;Enabled="";Nesting=$nesting;DN=$nestedmember.distinguishedname;Comment=""} 
                 
                if ($nestedmember.objectclass -eq "user") 
                { 
                    if ($Credential -eq $false) { $nestedADMember = get-aduser $nestedmember -properties enabled,displayname }
                    else { $nestedADMember = Get-ADUser -Identity $nestedmember -properties enabled,displayname -Server $Domain -Credential $Credential }
                    
                    $table = new-object psobject -property $props 
                    $table.enabled = $nestedadmember.enabled
                    $table.name = $nestedadmember.samaccountname
                    $table.displayname = $nestedadmember.displayname
                    if ($indent) 
                    { 
                    indent $table | select @{N="Name";E={"$($_.name)  ($($_.displayname))"}}
                    } 
                    else 
                    { 
                    $table | select type,name,displayname,parentgroup,nesting,enabled,dn,comment 
                    } 
                } 
                elseif ($nestedmember.objectclass -eq "group") 
                {  
                    $table = new-object psobject -Property $props 
                     
                    if ($memberof -contains $nestedmember.distinguishedname) 
                    { 
                        $table.comment ="Circular membership" 
                        $circular = 1 
                    } 
                    if ($indent) 
                    { 
                    indent $table | select name,comment | %{
						
						if ($_.comment -ne "")
						{
						[console]::foregroundcolor = "red"
						write-output "$($_.name) (Circular Membership)"
						[console]::ResetColor()
						}
						else
						{
						[console]::foregroundcolor = "yellow"
						write-output "$($_.name)"
						[console]::ResetColor()
						}
                    }
					}
                    else 
                    { 
                    $table | select type,name,displayname,parentgroup,nesting,enabled,dn,comment 
                    } 
                    if ($indent) 
                    { 
                       Get-ADNestedGroupMembers -GroupName $nestedmember.distinguishedName -nesting $nesting -circular $circular -indent 
                    } 
                    else  
                    { 
                       Get-ADNestedGroupMembers -GroupName $nestedmember.distinguishedName -nesting $nesting -circular $circular 
                    } 
              	                  
               } 
                else 
                { 
                    
                    if ($nestedmember)
                    {
                        $table = new-object psobject -property $props
                        if ($indent) 
                        { 
    	                    indent $table | select name 
                        } 
                        else 
                        { 
                        $table | select type,name,displayname,parentgroup,nesting,enabled,dn,comment    
                        } 
                     }
                } 
              
            } 
         } 
    } 
    else {Write-Warning "Active Directory module is not loaded"}        
}

#-------------[Execution]------------------------------------------------------

<# Pseudocode 

Logic, flow, etc. 

End Pseudocode #>

if ($Mode -eq "CSV") {
    foreach ($line in $csvdata) {
        $Group = $line.$($Header)
        $GroupInfo = Trim-GroupName -GroupName $Group
        $outfile = $outdir + "\" + $iso8601 + "_" + $GroupInfo.Group + ".csv"
        Get-ADNestedGroupMembers -GroupName $GroupInfo.Group | Export-CSV -Path $outfile -NoTypeInformation
        Write-Host "Report written to $outfile." -ForegroundColor Cyan
    }
}
elseif ($Mode -eq "Group") {
    $GroupInfo = Trim-GroupName -GroupName $Group
    $outfile = $outdir + "\" + $iso8601 + "_" + $GroupInfo.Group + ".csv"
    Get-ADNestedGroupMembers -GroupName $GroupInfo.Group | Export-CSV -Path $outfile -NoTypeInformation
    Write-Host "Report written to $outfile." -ForegroundColor Cyan
}
else {
    Throw "Unknown mode $CSV."
}